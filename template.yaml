Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Notification Settings"
        Parameters:
          - NotifyDaysInterval
          - DisplayAccountId
          - EmailAddress
          - SlackWebhookUrl
          - LineAccessToken

Parameters:
  NotifyDaysInterval:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 31
    Description: "Choose the interval of notification. (1-31)"
  DisplayAccountId:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: "If you want to add the account ID to the notification message, set true. If not, set false."
  EmailAddress:
    Type: String
    Default: ""
    Description: "If you want to notify by Email, set Email Address. If not, leave it blank."
  SlackWebhookUrl:
    Type: String
    Default: ""
    NoEcho: true
    Description: "If you want to notify by Slack, set Slack Webhook URL. If not, leave it blank."
  LineAccessToken:
    Type: String
    Default: ""
    NoEcho: true
    Description: "If you want to notify by LINE, set LINE Access Token. If not, leave it blank."

Conditions:
  OnEmail: !Not [!Equals [!Ref EmailAddress, ""]]
  OnSlack: !Not [!Equals [!Ref SlackWebhookUrl, ""]]
  OnLine: !Not [!Equals [!Ref LineAccessToken, ""]]
  OnAccountId: !Equals [!Ref DisplayAccountId, true]

Resources:
  NABTopicToEmail:
    Type: AWS::SNS::Topic
    Condition : OnEmail
    Properties:
      TopicName: !Sub ${AWS::StackName}-nab-topic
      Subscription:
        - Endpoint: !Ref EmailAddress
          Protocol: email

  NABSecretForSlack:
    Type: AWS::SecretsManager::Secret
    Condition : OnSlack
    Properties:
      Description: "Slack Webhook URL"
      SecretString: !Sub '{"info": "${SlackWebhookUrl}"}'
      Name: !Sub /${AWS::StackName}-nab-secret/slack

  NABSecretForLine:
    Type: AWS::SecretsManager::Secret
    Condition : OnLine
    Properties:
      Description: "LINE Access Token"
      SecretString: !Sub '{"info": "${LineAccessToken}"}'
      Name: !Sub /${AWS::StackName}-nab-secret/line

  NABFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-nab-function-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  NABCEAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-nab-ce-access-policy
      Roles:
        - !Ref NABFunctionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ce:GetCostAndUsage"
            Resource: "*"

  NABEmailPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: OnEmail
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-nab-email-policy
      Roles:
        - !Ref NABFunctionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sns:publish"
            Resource: !Ref NABTopicToEmail

  NABSlackPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: OnSlack
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-nab-slack-policy
      Roles:
      - !Ref NABFunctionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Ref NABSecretForSlack

  NABLinePolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: OnLine
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-nab-line-policy
      Roles:
      - !Ref NABFunctionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Ref NABSecretForLine

  NABFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-nab-function
      Handler: index.lambda_handler
      Runtime: python3.12
      Role: !GetAtt NABFunctionRole.Arn
      Timeout: 60
      LoggingConfig:
        LogFormat: JSON
        ApplicationLogLevel: INFO
        SystemLogLevel: INFO
      Layers:
        - arn:aws:lambda:ap-northeast-1:133490724326:layer:AWS-Parameters-and-Secrets-Lambda-Extension:4
      Environment:
        Variables:
          ACCOUNT_ID: !If
            - OnAccountId
            - !Sub ${AWS::AccountId}
            - !Ref AWS::NoValue
          EMAIL_TOPIC_ARN: !If
            - OnEmail
            - !Ref NABTopicToEmail
            - !Ref AWS::NoValue
          SLACK_SECRET_NAME: !If
            - OnSlack
            - !Sub /${AWS::StackName}-nab-secret/slack
            - !Ref AWS::NoValue
          LINE_SECRET_NAME: !If
            - OnLine
            - !Sub /${AWS::StackName}-nab-secret/line
            - !Ref AWS::NoValue
      Code:
        ZipFile: |
          import json
          import logging
          import os
          from datetime import date, datetime, timedelta
          from typing import Any, Dict, MutableMapping, Optional, Tuple
          from urllib import request
          
          import boto3
          
          logger = logging.getLogger()
          
          ce = boto3.client("ce", region_name="us-east-1")
          
          # AWS アカウント名を取得するためのクライアント
          org_client = boto3.client("organizations")
          
          
          def lambda_handler(event: Dict[str, Any], context: Any) -> None:
              """AWS Lambda関数のエントリポイントとして、請求情報を処理し、通知を送信する。
          
              この関数は、AWSの請求データを取得し、前日の請求データと比較した結果を評価します。
              請求情報に基づいて生成されたメッセージを、設定された宛先（メール、Slack、LINE）に送信します。
              宛先が設定されていない場合はエラーログを出力します。
          
              Args:
                  event (Dict[str, Any]): Lambda関数に渡されるイベントオブジェクト。
                  context (Any): ランタイム情報を提供するオブジェクト。
          
              Raises:
                  Exception: メッセージ送信時または処理中にエラーが発生した場合に例外をスローします。
              """
              current_billing_data = get_billing_data()
              prev_billing_data = get_billing_data(single_date=True)
          
              total_billing_info, service_billings, account_billings = process_billing_data(
                  current_billing_data, prev_billing_data
              )
          
              # 投稿用のメッセージを作成する
              (title, detail) = create_message(
                  total_billing_info, service_billings, account_billings
              )
          
              try:
                  email_topic_arn = os.environ.get("EMAIL_TOPIC_ARN")
                  slack_secret_name = os.environ.get("SLACK_SECRET_NAME")
                  line_secret_name = os.environ.get("LINE_SECRET_NAME")
          
                  # メール用トピックが設定されている場合は、メール用トピックにメッセージを送信する
                  if email_topic_arn:
                      sns = boto3.client("sns")
                      sns.publish(
                          TopicArn=email_topic_arn,
                          Subject=title,
                          Message=detail,
                      )
          
                  # SlackのWebhook URLが設定されている場合は、Slackにメッセージを投稿する
                  if slack_secret_name:
                      webhook_url = get_secret(slack_secret_name, "info")
                      payload = {
                          "text": title,
                          "blocks": [
                              {"type": "header", "text": {"type": "plain_text", "text": title}},
                              {"type": "section", "text": {"type": "plain_text", "text": detail}},
                          ],
                      }
                      data = json.dumps(payload).encode()
                      headers = {"Content-Type": "application/json"}
          
                      send_request(webhook_url, data, headers)
          
                  # LINEのアクセストークンが設定されている場合は、LINEにメッセージを投稿する
                  if line_secret_name:
                      channel_access_token = get_secret(line_secret_name, "info")
                      webhook_url = "https://api.line.me/v2/bot/message/broadcast"
                      payload = {"messages": [{"type": "text", "text": f"{title}\n\n{detail}"}]}
                      data = json.dumps(payload).encode("utf-8")
                      headers = {
                          "Content-Type": "application/json",
                          "Authorization": f"Bearer {channel_access_token}",
                      }
          
                      send_request(webhook_url, data, headers)
          
                  # いずれの送信先も設定されていない場合はエラーを出力する
                  if not email_topic_arn and not slack_secret_name and not line_secret_name:
                      logger.error(
                          "No destination to post message. Please set environment variables."
                      )
          
              except Exception as e:
                  logger.exception("Exception occurred: %s", e)
                  raise e
          
          
          def get_billing_data() -> dict:
              """AWSのCost Explorerから請求情報を取得する。
          
              この関数は、指定された期間のAWS請求データを取得します。
              デフォルトでは当月全体のデータを取得しますが、`single_date`フラグが
              Trueの場合は、直近1日のデータを取得します。
          
              Args:
                  single_date (bool): Trueに設定した場合、前日の請求データを取得する。
                                      デフォルトはFalse。
          
              Returns:
                  dict: 請求期間、グループ化されたサービス、およびリンクアカウントごとの
                        請求情報を含む辞書。
          
              Raises:
                  boto3のクライアントメソッドの呼び出しに失敗した場合、その例外が伝播します。
              """
              start_date, end_date = get_cost_date_range()
          
              response = ce.get_cost_and_usage(
                  TimePeriod={
                      "Start": start_date,
                      "End": end_date,
                  },
                  Granularity="DAILY",
                  Metrics=["UnblendedCost"],
                  GroupBy=[
                      {"Type": "DIMENSION", "Key": "SERVICE"},
                      {"Type": "DIMENSION", "Key": "LINKED_ACCOUNT"},
                  ],
              )
              return response
          
          
          def process_billing_data(current_data):
              """請求データを処理し、集計結果を返す。
          
              現在の請求データと前日の請求データを受け取り、総請求額、
              サービスごとの請求額、アカウントごとの請求額を計算してまとめます。
          
              Args:
                  current_data (dict): 現在の請求期間のデータを含む辞書。
          
              Returns:
                  Tuple[dict, list, list]:
                      - 総請求額の情報を含む辞書。開始日、終了日、請求額、前日の請求額を含む。
                      - サービスごとの請求情報をまとめたリスト。
                      - アカウントごとの請求情報をまとめたリスト。
              """
              daily_data = current_data["ResultsByTime"]
          
              # 各サービスとアカウントの総請求額を格納する辞書
              aggregated_service_billings = {}
              aggregated_account_billings = {}
          
              # 全体の請求額を計算
              total_billing = 0.0
          
              for day_index, day_data in enumerate(daily_data):
                  for item in day_data["Groups"]:
                      billing = float(item["Metrics"]["UnblendedCost"]["Amount"])
                      total_billing += billing
          
                      # サービスの請求額の集計
                      service_name = item["Keys"][0]
                      if service_name not in aggregated_service_billings:
                          aggregated_service_billings[service_name] = {"billing": 0.0, "prev_billing": 0.0}
          
                      aggregated_service_billings[service_name]["billing"] += billing
                      if day_index == len(daily_data) - 1:  # 「前日」の合計
                          aggregated_service_billings[service_name]["prev_billing"] += billing
          
                      # アカウントごとの請求額の集計
                      if len(item["Keys"]) > 1:
                          account_id = item["Keys"][1]
                          if account_id not in aggregated_account_billings:
                              aggregated_account_billings[account_id] = {"billing": 0.0, "prev_billing": 0.0}
          
                          aggregated_account_billings[account_id]["billing"] += billing
                          if day_index == len(daily_data) - 1:  # 「前日」の合計
                              aggregated_account_billings[account_id]["prev_billing"] += billing
          
              # 前日から当日への増加分を計算
              prev_day_total_billing = sum(
                  float(item["Metrics"]["UnblendedCost"]["Amount"])
                  for item in daily_data[-1]["Groups"]
              )
          
              # サービスおよびアカウントのリストを作成
              service_billings = [
                  {"service_name": service_name, "billing": data["billing"], "prev_billing": data["prev_billing"]}
                  for service_name, data in aggregated_service_billings.items()
              ]
          
              account_billings = [
                  {"account_id": account_id, "billing": data["billing"], "prev_billing": data["prev_billing"]}
                  for account_id, data in aggregated_account_billings.items()
              ]
          
              # 開始日と終了日を取得
              start_date = daily_data[0]["TimePeriod"]["Start"]
              end_date = daily_data[-1]["TimePeriod"]["End"]
          
              return (
                  {
                      "start": start_date,
                      "end": end_date,
                      "billing": total_billing,
                      "prev_billing": prev_day_total_billing,
                  },
                  service_billings,
                  account_billings,
              )
          
          
          def main():
              """AWS請求情報を取得し、処理した結果を出力する。
          
              この関数はAWSの請求データを取得し、現在の請求期間と前日の請求期間のデータを処理します。
              複数のレベル（総額、サービス別、アカウント別）で請求情報を整理し、
              メッセージを作成してコンソールに表示します。
              """
              current_billing_data = get_billing_data()
          
              total_billing_info, service_billings, account_billings = process_billing_data(current_billing_data)
          
              title, details = create_message(
                  total_billing_info, service_billings, account_billings
              )
              print(title)
              print(details)
          
          
          def create_message(
              total_billing: dict, service_billings: list, account_billings: list
          ) -> Tuple[str, str]:
              """請求情報に基づいてメッセージのタイトルと詳細を作成する。
          
              与えられた請求情報から、全体の請求額、サービスごとの請求額、および
              アカウントごとの請求額に基づいて、人間が読みやすい形式のメッセージを作成します。
              メッセージは、通知に使用できるタイトルと詳細の2つの文字列を返します。
          
              Args:
                  total_billing (dict): 全体の請求情報を含む辞書。'start', 'end', 'billing', 'prev_billing' キーを含む。
                  service_billings (list): 各サービスごとの請求情報を含むリスト。各項目は'dict'であり、'service_name', 'billing', 'prev_billing'を含む。
                  account_billings (list): 各アカウントごとの請求情報を含むリスト。各項目は'dict'であり、'account_id', 'billing', 'prev_billing'を含む。
          
              Returns:
                  Tuple[str, str]: メッセージのタイトルと詳細を表す2つの文字列。
              """
              start = datetime.strptime(total_billing["start"], "%Y-%m-%d").strftime("%m/%d")
          
              # Endの日付は結果に含まないため、表示上は前日にしておく
              end_today = datetime.strptime(total_billing["end"], "%Y-%m-%d")
              end_yesterday = (end_today - timedelta(days=1)).strftime("%m/%d")
          
              total = total_billing["billing"]
              prev_total = total_billing["prev_billing"]
          
              account_id = os.environ.get("ACCOUNT_ID")
          
              title = f"AWS Billing Notification ({start}～{end_yesterday}) : {total:.02f} USD ({prev_total:+.02f} USD)"
          
              details = []
          
              # サービス毎の請求額
              details.append("Service Billing Details:")
              for item in service_billings:
                  service_name = item["service_name"]
                  billing = item["billing"]
                  prev_billing = item["prev_billing"]
          
                  if billing == 0.0:
                      # 請求無し（0.0 USD）の場合は、内訳を表示しない
                      continue
                  details.append(f"・{service_name}: {billing:.02f} USD ({prev_billing:+.02f} USD)")
          
              # 全サービスの請求無し（0.0 USD）の場合は以下メッセージを追加
              if not details:
                  details.append("No charge this period at present.")
          
              # アカウントIDと名前のマッピングを取得
              account_name_mapping = get_account_name_mapping()
          
              # アカウント毎の請求額
              details.append("\nAccount Billing Details:")
              aggregated_account_billings = create_aggregated_account_billings(account_billings)
              for item in aggregated_account_billings:
                  account_id = item["account_id"]
                  account_name = account_name_mapping.get(account_id, None)
                  billing = item["billing"]
                  prev_billing = item["prev_billing"]
          
                  if billing == 0.0:
                      # 請求無し（0.0 USD）の場合は、内訳を表示しない
                      continue
                  if account_name is None:
                      details.append(
                          f"・{account_id}: {billing:.02f} USD ({prev_billing:+.02f} USD)"
                      )
                  else:
                      details.append(
                          f"・{account_name} ({account_id}): {billing:.02f} USD ({prev_billing:+.02f} USD)"
                      )
          
              # 全アカウントの請求無し（0.0 USD）の場合は以下メッセージを追加
              if not any(item["billing"] != "0.0" for item in account_billings):
                  details.append("No account charge this period at present.")
          
              return title, "\n".join(details)
          
          
          def get_account_name_mapping() -> Dict[str, str]:
              """AWS OrganizationsからアカウントIDと名前のマッピングを取得する。
          
              AWS Organizations APIを使用して、AWSアカウントIDとその対応するアカウント名の
              マッピングを取得します。この関数は呼び出し元の権限によっては
              アクセスが拒否される可能性があります。その場合は、アカウントIDのみを使用した
              代替案をログに警告として記録します。
          
              Returns:
                  Dict[str, str]: アカウントIDをキー、アカウント名を値とする辞書。
          
              Raises:
                  Boto3が特定の例外を投げた場合はその例外が伝播します。ただし、アクセス権がない場合は
                  警告を出力して処理を続行します。
              """
              account_mapping = {}
              try:
                  paginator = org_client.get_paginator("list_accounts")
          
                  for page in paginator.paginate():
                      logger.debug(f"Page: {page}")
                      for account in page["Accounts"]:
                          account_id = account["Id"]
                          account_name = account["Name"]
                          account_mapping[account_id] = account_name
              except org_client.exceptions.AccessDeniedException:
                  logger.warning(
                      "Access denied to list accounts. Falling back to using account IDs."
                  )
          
              return account_mapping
          
          
          def create_aggregated_account_billings(account_billings: list) -> list:
              """
              アカウントIDごとの請求額を集計する。
          
              各アカウントIDに対して現在および前回の請求額を合計します。
              結果は、アカウントID、合計請求額、前回の請求額を含む辞書のリストとして返されます。
          
              Args:
                  account_billings (list): 'account_id', 'billing', 'prev_billing'を含む各アカウントの請求データのリスト。
          
              Returns:
                  list: 'account_id'、'billing'、'prev_billing'を含む集計された請求データのリスト。
              """
              aggregated_billings = {}
          
              for item in account_billings:
                  account_id = item["account_id"]
                  billing = item["billing"]
                  prev_billing = item["prev_billing"]
          
                  if account_id not in aggregated_billings:
                      aggregated_billings[account_id] = {"billing": 0.0, "prev_billing": 0.0}
          
                  # 現在と前回の両方の請求額を集計
                  aggregated_billings[account_id]["billing"] += billing
                  aggregated_billings[account_id]["prev_billing"] += prev_billing
          
              # 辞書をリストに変換
              return [
                  {
                      "account_id": account_id,
                      "billing": data["billing"],
                      "prev_billing": data["prev_billing"],
                  }
                  for account_id, data in aggregated_billings.items()
              ]
          
          
          def get_cost_date_range() -> Tuple[str, str]:
              """請求期間を取得する
          
              この関数は、当月の開始日から今日までの請求期間を計算します。
              ただし、月初の場合は先月の1日から当月の1日までの期間を取得します。
              これは、Cost Explorer APIの制約により、開始日と終了日に同じ日付を指定できないためです。
          
              Args:
                  only_until_yesterday (bool): True に設定した場合、終了日を前日に設定します。
          
              Returns:
                  Tuple[str, str]: ISO形式の開始日と終了日を含むタプル。
              """
              start_date = date.today().replace(day=1).isoformat()
              # end_date = date.today().isoformat()
              # TODO: 金額の確定が最大24時間遅れるため、確認のために enddateを前日にしているため確認後に戻す
              end_date = (date.today() - timedelta(days=1)).isoformat()
          
              # get_cost_and_usage()のstartとendに同じ日付は指定不可のため、
              # 「今日が1日」なら、「先月1日から今月1日（今日）」までの範囲にする
              if start_date == end_date:
                  end_of_month = datetime.strptime(start_date, "%Y-%m-%d") + timedelta(days=-1)
                  begin_of_month = end_of_month.replace(day=1)
                  start_date = begin_of_month.isoformat()
          
              return start_date, end_date
          
          
          def get_secret(secret_name: Optional[str], secret_key: str) -> Any:
              """シークレットマネージャからシークレットを取得する
          
              AWSのParameters and Secrets Lambda Extensionを使用して、Secrets Managerから
              効率的にシークレットを取得します。この関数はローカルのエンドポイントを
              使用してシークレットにアクセスします。
          
              Args:
                  secret_name (Optional[str]): 取得したいシークレットの名前。
                  secret_key (str): シークレットデータの中で取得したい特定のキー。
          
              Returns:
                  Any: 指定したシークレットキーに対応する値。
          
              Raises:
                  ValueError: シークレット名またはAWSセッショントークンが設定されていない場合に発生します。
          
              Note:
                  詳細については、AWSの公式ドキュメントを参照してください:
                  https://docs.aws.amazon.com/ja_jp/secretsmanager/latest/userguide/retrieving-secrets_lambda.html
              """
          
              # シークレット名を取得
              if secret_name is None:
                  raise ValueError("Secret name must not be None")
          
              # Lambda ローカル環境で動作する AWS Secrets Manager のエンドポイントへのリクエストを準備
              # AWS Parameters and Secrets Lambda Extension により、http://localhost:2773 で提供されるローカルエンドポイントを使用
              secrets_extension_endpoint = (
                  "http://localhost:2773/secretsmanager/get?secretId=" + secret_name
              )
          
              # ヘッダーにAWSセッショントークンを設定
              aws_session_token = os.environ.get("AWS_SESSION_TOKEN")
              if aws_session_token is None:
                  raise ValueError("aws sessuib token must not be None")
              headers = {"X-Aws-Parameters-Secrets-Token": aws_session_token}
          
              # Secrets Manager へのアクセスを高速化するために拡張機能が提供するキャッシュを活用
              # シークレットマネージャからシークレットを取得
              secrets_extension_req = request.Request(secrets_extension_endpoint, headers=headers)
              with request.urlopen(secrets_extension_req) as response:
                  secret_config = response.read()
              secret_json = json.loads(secret_config)["SecretString"]
              secret_value = json.loads(secret_json)[secret_key]
              return secret_value
          
          
          def send_request(url: str, data: bytes, headers: MutableMapping[str, str]) -> None:
              """指定されたURLにHTTP POSTリクエストを送信する。
          
              提供されたデータとヘッダーを使用して指定されたURLに対してHTTP POSTリクエストを実行します。
              レスポンスが正常に返ってくるかを確認するために、ステータスコードを出力します。
          
              Args:
                  url (str): リクエストを送信する先のURL。
                  data (bytes): POSTリクエストの本文として送信されるデータ。
                  headers (MutableMapping[str, str]): リクエストに含めるヘッダー情報を表す辞書。
          
              Returns:
                  None
          
              Raises:
                  urllib.error.URLError: リクエストの送信中にURLにアクセスできない場合に発生します。
                  urllib.error.HTTPError: リクエストがHTTPエラーのステータスコードを返した場合に発生します。
              """
              req = request.Request(url, data=data, headers=headers, method="POST")
              with request.urlopen(req) as response:
                  print(response.status)
          
          
  NABFunctionScheduler:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: !Sub ${AWS::StackName}-nab-function-scheduler
      Description: "Start Notify AWS Billing Function"
      ScheduleExpression: !Sub cron(0 9 */${NotifyDaysInterval} * ? *)
      ScheduleExpressionTimezone: "Asia/Tokyo"
      FlexibleTimeWindow:
        Mode: "OFF"
      State: ENABLED
      Target:
        Arn: !GetAtt NABFunction.Arn
        RoleArn: !GetAtt NABFunctionSchedulerRole.Arn

  NABFunctionSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-nab-function-scheduler-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

Outputs:
  FunctionArn:
    Description: "Lambda Function ARN"
    Value: !GetAtt NABFunction.Arn
  SchedulerArn:
    Description: "Scheduler ARN"
    Value: !GetAtt NABFunctionScheduler.Arn
